# constants.py
import math

ORIGINAL_PITCH_WIDTH = 300
ORIGINAL_PITCH_HEIGHT = 200
SCALE_FACTOR = 3
PITCH_WIDTH = int(ORIGINAL_PITCH_WIDTH * SCALE_FACTOR)
PITCH_HEIGHT = int(ORIGINAL_PITCH_HEIGHT * SCALE_FACTOR)
UI_WIDTH = 300
UI_HEIGHT = PITCH_HEIGHT
ROBOT_RADIUS = int(6 * SCALE_FACTOR)
BALL_RADIUS = int(2 * SCALE_FACTOR)
MOUTH_WIDTH = int(4 * SCALE_FACTOR)
MOUTH_LENGTH = int(2 * SCALE_FACTOR)
ROBOT_MAX_SPEED = 3 * SCALE_FACTOR
BALL_MAX_SPEED = 8 * SCALE_FACTOR
DT = 0.1
BALL_FRICTION = 0.03 # REDUCED BALL FRICTION - ball moves slightly faster, more dynamic
GOAL_WIDTH = int(2 * SCALE_FACTOR) # Goal width is line thickness
GOAL_LINE_LENGTH = ROBOT_RADIUS * 6
GOAL_DEPTH = int(2 * SCALE_FACTOR)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
GREY = (200, 200, 200)
UI_BACKGROUND = (220, 220, 220)
TRANSPARENT_GREY = (100, 100, 100, 200)
SHOOT_CHANCE = 0.4  # INCREASED SHOOT CHANCE
PASS_CHANCE = 0.6   # SLIGHTLY REDUCED PASS CHANCE - encourage more shots, but still pass
PASS_DISTANCE = 5 * ROBOT_RADIUS
BLOCKING_DISTANCE = 4 * ROBOT_RADIUS
AGGRESSIVE_SHOOT_RANGE = 15 * ROBOT_RADIUS # INCREASED SHOOT RANGE
LONG_SHOT_CHANCE = 0.1
# Role switch probabilities
ROLE_SWITCH_PROBABILITY = 0.01
STRIKER_CHANCE = 0.4
SUPPORTER_CHANCE = 0.3
DEFENDER_CHANCE = 0.3
GOALKEEPER_CHANCE = 0.1 # New Goalkeeper Role


def distance(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def angle_between_points(x1, y1, x2, y2):
    return math.atan2(y2 - y1, x2 - x1)
